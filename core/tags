!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMMON_H	./common.h	2;"	d
EdtpMap	./map.h	/^typedef struct EdtpMap {$/;"	s
LIBEDTP_H	./libedtp.h	2;"	d
LIBEDTP_MAP_H	./map.h	2;"	d
LIBEDTP_PACKET_H	./packet.h	2;"	d
LIBEDTP_SOCKET_H	./socket.h	2;"	d
LIBEDTP_THREAD_H	./thread.h	2;"	d
MapElement	./map.h	/^typedef MapElement;$/;"	t
MapElement	./rbtree.h	/^typedef struct MapElement{$/;"	s
RBTREE_H	./rbtree.h	2;"	d
RtlGenRandom	./common.c	9;"	d	file:
bin2hex	./common.c	/^bin2hex(const u_char *data, uint32_t size, char *out) $/;"	f
color	./rbtree.h	/^	int color;$/;"	m	struct:MapElement
delete_map	./map.c	/^delete_map(EdtpMap *map)$/;"	f
delete_tree	./rbtree.c	/^delete_tree(EdtpMap *map)$/;"	f
edtp_type	./common.h	/^static int edtp_type[65536] = {0};$/;"	v
is_little_endian	./common.c	/^is_little_endian() $/;"	f
key	./rbtree.h	/^	char *key;$/;"	m	struct:MapElement
le_con	./socket.c	/^le_con(const char *ip, int port)$/;"	f
le_listen	./socket.c	/^le_listen(int port, int backlog)$/;"	f
le_ping	./socket.c	/^le_ping(const char *ip)$/;"	f
le_read	./socket.c	/^le_read(int fd_sock, char *buff, size_t size)$/;"	f
le_write	./socket.c	/^le_write(int fd_sock, const char *buff, size_t size)$/;"	f
left	./rbtree.h	/^	struct Tree *left;$/;"	m	struct:MapElement	typeref:struct:MapElement::Tree
listen	./packet.c	/^listen(int port, void *callback, int backlog)$/;"	f
main	./libedtp.c	/^main()$/;"	f
map_begin	./map.c	/^map_begin(EdtpMap *map)$/;"	f
map_end	./map.c	/^map_end(EdtpMap *map)$/;"	f
map_erase	./map.c	/^map_erase(EdtpMap *map, MapElement *element)$/;"	f
map_insert	./map.c	/^map_insert(EdtpMap *map, const char *key, const char *value)$/;"	f
map_next	./map.c	/^map_next(MapElement *element)$/;"	f
map_set	./map.c	/^map_set(EdtpMap *map, const char *key, const char *value)$/;"	f
map_value	./map.c	/^map_value(EdtpMap *map, const char *key)$/;"	f
max	./common.h	15;"	d
max	./common.h	8;"	d
mhash	./common.c	/^mhash(const char* str, uint32_t len) $/;"	f
new_thread	./thread.c	/^new_thread(void *func, void *arg)$/;"	f
parent	./rbtree.h	/^	struct Tree *parent;$/;"	m	struct:MapElement	typeref:struct:MapElement::Tree
print_time	./common.c	/^print_time() $/;"	f
random_mem	./common.c	/^random_mem(u_char *mem, uint32_t len) $/;"	f
random_s	./common.c	/^random_s(int min, int max, int *err) $/;"	f
read_block	./packet.c	/^read_block(int fd_sock, void *buff, size_t max_size)$/;"	f
read_sizeof	./packet.c	/^read_sizeof(int fd_sock)$/;"	f
read_type	./packet.c	/^read_type(int fd_sock)$/;"	f
ready_read	./packet.c	/^ready_read(int fd_sock)$/;"	f
right	./rbtree.h	/^	struct Tree *right;$/;"	m	struct:MapElement	typeref:struct:MapElement::Tree
root	./map.h	/^	MapElement *root;$/;"	m	struct:EdtpMap
rotate34	./rbtree.c	/^rotate34(MapElement *a, MapElement *b, MapElement *c, MapElement *t0, MapElement *t1, MapElement *t2, MapElement *t3, int type)$/;"	f
size	./map.h	/^	int size;$/;"	m	struct:EdtpMap
struct_register	./packet.c	/^struct_register(const char *id, const char *member_length)$/;"	f
struct_table	./packet.h	/^static struct struct_table {$/;"	s
timestamp	./common.c	/^timestamp() $/;"	f
tree_add	./rbtree.c	/^tree_add(MapElement *root, const char *key, const char *value)$/;"	f
tree_del	./rbtree.c	/^tree_del(MapElement *root, const char *key, MapElement *element)$/;"	f
tree_first	./rbtree.c	/^tree_first(EdtpMap *root)$/;"	f
tree_last	./rbtree.c	/^tree_last(EdtpMap *root)$/;"	f
tree_next	./rbtree.c	/^tree_next(MapElement *root)$/;"	f
tree_search	./rbtree.c	/^tree_search(EdtpMap *map, const char *key)$/;"	f
u_char	./common.h	/^typedef unsigned char u_char;$/;"	t
uuid	./common.c	/^uuid(char *_uuid) $/;"	f
value	./rbtree.h	/^	char *value;$/;"	m	struct:MapElement
