!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMMON_H	common.h	2;"	d
COPY	common.h	/^	COPY,$/;"	e	enum:__anon1
COPY_AND_NEW	common.h	/^	COPY_AND_NEW,$/;"	e	enum:__anon1
EdtpMap	map.h	/^struct EdtpMap {$/;"	s
LIBEDTP_MAP_H	map.h	2;"	d
LIBEDTP_PACKET_H	packet.h	2;"	d
LIBEDTP_SOCKET_H	socket.h	2;"	d
LIBEDTP_THREAD_H	thread.h	2;"	d
MapElement	rbtree.h	/^struct MapElement{$/;"	s
RBTREE_H	rbtree.h	2;"	d
RtlGenRandom	common.c	10;"	d	file:
Struct_Table	packet.h	/^struct Struct_Table {$/;"	s
accept	packet.c	/^accept(int fd, void *addr_info, void *callback)$/;"	f
add	rbtree.c	/^add(MapElement *root, const char *key, const char *value, int value_size)$/;"	f
add_rebalance	rbtree.c	/^add_rebalance(MapElement **root, MapElement *node, MapElement *parent, MapElement *grandpa, MapElement *uncle)$/;"	f
bin2hex	common.c	/^bin2hex(const u_char *data, uint32_t size, char *out) $/;"	f
color	rbtree.h	/^	int color;$/;"	m	struct:MapElement
del	rbtree.c	/^del(const char *key, MapElement *root)$/;"	f
del_rebalance	rbtree.c	/^del_rebalance(MapElement *node, MapElement **root)$/;"	f
delete_map	map.c	/^delete_map(EdtpMap *map)$/;"	f
delete_tree	rbtree.c	/^delete_tree(MapElement *root)$/;"	f
edtp_type	common.h	/^static int edtp_type[65536] = {0};$/;"	v
free_element	rbtree.c	/^free_element(MapElement *node)$/;"	f
is_little_endian	common.c	/^is_little_endian() $/;"	f
key	rbtree.h	/^	char *key;$/;"	m	struct:MapElement
le_accept	socket.c	/^le_accept(int *fd_sock, int type)$/;"	f
le_body_size	packet.c	/^le_body_size(int)$/;"	f
le_clean	socket.c	/^le_clean()$/;"	f
le_close	socket.c	/^le_close(int fd_sock)$/;"	f
le_con	socket.c	/^le_con(const char *ip, int port)$/;"	f
le_listen	socket.c	/^le_listen(int port, int backlog)$/;"	f
le_ping	socket.c	/^le_ping(const char *ip)$/;"	f
le_read	socket.c	/^le_read(int fd_sock, char *buff, size_t size)$/;"	f
le_write	socket.c	/^le_write(int fd_sock, const char *buff, size_t size)$/;"	f
left	rbtree.h	/^	struct MapElement *left;$/;"	m	struct:MapElement	typeref:struct:MapElement::MapElement
lestring	common.h	/^typedef struct lestring {$/;"	s
lestring	common.h	/^}lestring;$/;"	t	typeref:struct:lestring
lestring_copy	common.c	/^lestring_copy(lestring *dst, const char *str, int size, int type)$/;"	f
lestring_copy	common.c	/^lestring_copy(lestring *dst, lestring *srt, int type)$/;"	f
lestring_free	common.c	/^lestring_free(lestring *str)$/;"	f
listen	packet.c	/^listen(int port, void *callback, int backlog)$/;"	f
map_begin	map.c	/^map_begin(EdtpMap *map)$/;"	f
map_end	map.c	/^map_end(EdtpMap *map)$/;"	f
map_erase	map.c	/^map_erase(EdtpMap *map, MapElement *element)$/;"	f
map_erase	map.c	/^map_erase(EdtpMap *map, const char *key)$/;"	f
map_insert	map.c	/^map_insert(EdtpMap *map, const char *key, const char *value, int value_size)$/;"	f
map_next	map.c	/^map_next(MapElement *element)$/;"	f
map_set	map.c	/^map_set(EdtpMap *map, const char *key, const char *value, int value_size)$/;"	f
map_value	map.c	/^map_value(EdtpMap *map, const char *key)$/;"	f
max	common.h	13;"	d
max	common.h	26;"	d
mhash	common.c	/^mhash(const char* str, uint32_t len) $/;"	f
min	common.h	19;"	d
min	common.h	29;"	d
new_thread	thread.c	/^new_thread(void *func, void *arg)$/;"	f
parent	rbtree.h	/^	struct MapElement *parent;$/;"	m	struct:MapElement	typeref:struct:MapElement::MapElement
print_time	common.c	/^print_time() $/;"	f
random_mem	common.c	/^random_mem(u_char *mem, uint32_t len) $/;"	f
random_s	common.c	/^random_s(int min, int max, int *err) $/;"	f
read_block	packet.c	/^read_block(int fd_sock, void *buff, size_t max_size)$/;"	f
read_sizeof	packet.c	/^read_sizeof(int fd_sock)$/;"	f
read_type	packet.c	/^read_type(int fd_sock)$/;"	f
ready_read	packet.c	/^ready_read(int fd_sock)$/;"	f
right	rbtree.h	/^	struct MapElement *right;$/;"	m	struct:MapElement	typeref:struct:MapElement::MapElement
root	map.h	/^	MapElement *root;$/;"	m	struct:EdtpMap
rotate34	rbtree.c	/^rotate34(MapElement *a, MapElement *b, MapElement *c, MapElement *t0, MapElement *t1, MapElement *t2, MapElement *t3, int type)$/;"	f
search	rbtree.c	/^search(const char *key, MapElement **node, const MapElement *root)$/;"	f
size	common.h	/^	int size;$/;"	m	struct:lestring
size	map.h	/^	int size;$/;"	m	struct:EdtpMap
str	common.h	/^	char *str;$/;"	m	struct:lestring
struct_register	packet.c	/^struct_register(const char *id, const char *member_length)$/;"	f
struct_table	packet.h	/^static struct Struct_Table struct_table;$/;"	v	typeref:struct:Struct_Table
test	packet.h	/^	int test;$/;"	m	struct:Struct_Table
thread_func	thread.h	/^typedef void (*thread_func)(void *arg);$/;"	t
thread_func_none_arg	thread.h	/^typedef void (*thread_func_none_arg)();$/;"	t
timestamp	common.c	/^timestamp() $/;"	f
tree_add	rbtree.c	/^tree_add(MapElement *root, const char *key, const char *value, int value_size)$/;"	f
tree_del	rbtree.c	/^tree_del(MapElement *root, const char *key)$/;"	f
tree_first	rbtree.c	/^tree_first(const MapElement *root)$/;"	f
tree_last	rbtree.c	/^tree_last(const MapElement *root)$/;"	f
tree_next	rbtree.c	/^tree_next(const MapElement *node)$/;"	f
tree_search	rbtree.c	/^tree_search(const MapElement *root, const char *key)$/;"	f
u_char	common.h	/^typedef unsigned char u_char;$/;"	t
uuid	common.c	/^uuid(char *_uuid) $/;"	f
value	rbtree.h	/^	char *value;$/;"	m	struct:MapElement
value_size	rbtree.h	/^	int value_size;$/;"	m	struct:MapElement
